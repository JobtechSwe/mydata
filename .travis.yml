env:
  global:
    - DOCKER_COMPOSE_VERSION=1.23.2
    - IMAGE_TAG=latest

jobs:
  include:
    # code linter
    - stage: "lint"
      name: "Code lint"
      language: node_js
      install:
        - npm run install-all
      test: skip
      script:
        - npm run lint-all

    # end-to-end tests
    - stage: "end-2-end"
      name: "End-to-end tests"
      language: node_js
      services:
        - docker
      before_install:
        - sudo rm /usr/local/bin/docker-compose
        - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
        - chmod +x docker-compose
        - sudo mv docker-compose /usr/local/bin
      install:
        - npm run install-all
      test:
        - "npm run test:e2e"

    - stage: set-tag
      install: skip
      test: skip
      script:
        - echo $TRAVIS_TAG
        - export IMAGE_TAG=$TRAVIS_TAG
        - echo $IMAGE_TAG

    # build docker image(s)
    - stage: build
      install: skip
      test: skip
      services:
        - docker
      script:
        - docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
        - if [ -z "$TRAVIS_TAG" ]; then export IMAGE_TAG="$TRAVIS_TAG"; fi
        - echo ${IMAGE_TAG}
        - docker build --pull -t jobtechswe/mydata-app:${IMAGE_TAG} app/
        - docker build --pull -t jobtechswe/mydata-cv:${IMAGE_TAG} examples/cv/
        - docker build --pull -t jobtechswe/mydata-operator:${IMAGE_TAG} operator/
        - docker push jobtechswe/mydata-cv:${IMAGE_TAG}
        - docker push jobtechswe/mydata-app:${IMAGE_TAG}
        - docker push jobtechswe/mydata-operator:${IMAGE_TAG}

    # update openshift DeployConfig(s)
    - stage: deploy
      install:
        - bash ./infrastructure/travis/install-openshift.sh
        - export PATH=$PATH:/tmp/openshift
      script: bash infrastructure/travis/deploy.sh

# Flow control
stages:
  - name: lint
    # if: branch != master OR type = pull_request
    if: 1 = 0
  - name: end-2-end
    # if: branch != master OR type = pull_request
    if: 1 = 0
  - name: set-tag
    if: tag IS present
  - name: build
    # if: (branch = master AND type != pull_request) OR tag IS present
  - name: deploy
    if: (branch = master AND type != pull_request) OR tag IS present
