env:
- DOCKER_COMPOSE_VERSION=1.23.2

# The jobs section declares jobs available in this build context
jobs:
  include:
  # lint and run end-to-end tests
  - stage: "lint-and-test"
    name: "Lint, run end-to-end and integration tests"
    cache:
      npm: true
      directories:
      - ~/.cache/docker
      - ~/.nvm
    language: node_js
    services:
    # Require docker to be running in the build context
    - docker
    before_install:
    # Install a newer version of docker-compose than the one provided by Travis
    - sudo rm /usr/local/bin/docker-compose
    - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
    - chmod +x docker-compose
    - sudo mv docker-compose /usr/local/bin
    - if ! [ -x "$(command -v lerna)" ]; then npm install -g lerna; fi
    - sudo apt-get install libgconf-2-4
    install:
    - docker load -i ~/.cache/docker/node.tar || true
    - docker load -i ~/.cache/docker/redis.tar || true
    - docker load -i ~/.cache/docker/postgres.tar || true
    - npm run install
    before_script:
    - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
      > ./cc-test-reporter
    - chmod +x ./cc-test-reporter
    - './cc-test-reporter before-build'
    script:
    - npm run lint
    - npm run test:unit -- --coverage
    - npm run test:e2e
    after_script:
    - './cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT'
    - docker save node -o ~/.cache/docker/node.tar
    - docker save redis -o ~/.cache/docker/redis.tar
    - docker save postgres -o ~/.cache/docker/postgres.tar

  # build and deploy things
  - stage: deliver
    name: "Build and deploy code that has been updated"
    language: node_js
    cache:
      directories:
      - ~/.cache/docker
    install:
    # Install a new version of the openshift cli
    - mkdir -p /opt/openshift
    - wget -qO- https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar xvzf - -C /opt/openshift --strip-components=1
    - export PATH=$PATH:/opt/openshift
    services:
    # Require docker to be running in the build context
    - docker
    script:
    # Authenticate towards Docker Hub
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

    # Authenticate towards OpenShift
    - oc login $OPENSHIFT_URL --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true

    # If this is not a tag, build images tagged :latest
    - export PHASE="ci"
    # If this is a tag, build images tagged v<tag> and :latest-tag
    - if [ ! -z "$TRAVIS_TAG" ]; then export PHASE="test"; fi

    - bash .deliver-$PHASE.bash app/ jobtechswe/mydata-app
    - bash .deliver-$PHASE.bash . jobtechswe/mydata-operator operator/Dockerfile
    - bash .deliver-$PHASE.bash . jobtechswe/mydata-cv examples/cv/Dockerfile
    - bash .deliver-$PHASE.bash . jobtechswe/mydata-natreg examples/national-registration/Dockerfile

    - echo "Redeploying..."
    - oc rollout latest operator-$PHASE -n mydata
    - oc rollout latest cv-$PHASE -n mydata
    - oc rollout latest natreg-$PHASE -n mydata
    after_script:
    # ...and finally remove cached credentials
    - oc logout
    - docker logout

# Flow control
# This section defines the order in which stages are run and when to run certain stages
stages:
- name: lint-and-test
  if: branch != master
- name: deliver
  if: (branch = master AND type != pull_request) OR tag IS present

notifications:
  email:
    on_success: never
    on_failure: change
