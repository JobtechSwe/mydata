env:
  - DOCKER_COMPOSE_VERSION=1.23.2

# The jobs section declares jobs available in this build context
jobs:
  include:
    # code linter
    - stage: "lint"
      name: "Ensure code maintains the linting rules"
      cache: npm
      language: node_js
      install:
        - npm i -g lerna
        - npm run install
      test: skip
      script:
        - npm run lint

    # end-to-end tests
    - stage: "end-2-end"
      name: "Run end-to-end tests"
      cache: npm
      language: node_js
      services:
        # Require docker to be running in the build context
        - docker
      before_install:
        # Install a fresh version of docker-compose
        - sudo rm /usr/local/bin/docker-compose
        - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
        - chmod +x docker-compose
        - sudo mv docker-compose /usr/local/bin
      install:
        - npm i -g lerna
        - npm run install
      test: skip
      script:
        - npm run test:e2e

    # build docker image(s)
    - stage: build
      name: "Build Docker images and push them to Docker Hub"
      language: node_js
      install: skip
      test: skip
      services:
        # Require docker to be running in the build context
        - docker
      script:
        # Authenticate towards Docker Hub
        - docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

        # If this is not a tag, build images tagged :latest
        - export DOCKER_BUILD_SCRIPT=".docker-build.bash"
        # If this is a tag, build images tagged v<tag> and :latest-tag
        - if [ ! -z "$TRAVIS_TAG" ]; then export DOCKER_BUILD_SCRIPT=".docker-build-tag.bash"; fi

        - bash $DOCKER_BUILD_SCRIPT app/ jobtechswe/mydata-app
        - bash $DOCKER_BUILD_SCRIPT examples/cv/ jobtechswe/mydata-cv
        - bash $DOCKER_BUILD_SCRIPT operator/ jobtechswe/mydata-operator

        # ...and finally remove cached credentials
        - docker logout

    # update openshift DeployConfig(s)
    - stage: deploy
      name: "Update deployments in OpenShift"
      install:
        # Install a fresh version of the openshift cli
        - mkdir -p /opt/openshift
        - wget -qO- https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar xvzf - -C /opt/openshift --strip-components=1
        - export PATH=$PATH:/opt/openshift
      script:
        # Authenticate towards OpenShift
        - oc login $OPENSHIFT_URL --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true

        # Set the $PHASE variable that controls which DeploymentConfigs are affected
        - if [ ! -z "$TRAVIS_TAG" ]; then export PHASE=test; else PHASE=ci; fi

        # Tell CV and Operator to deploy, making them pull the latest images from Docker Hub
        - oc rollout latest cv-$PHASE -n mydata
        - oc rollout latest operator-$PHASE -n mydata

        # ...and finally remove cached credentials
        - oc logout

# Flow control
# This section defines the order in which stages are run and when to run certain stages
stages:
  - name: lint
    if: branch != master AND tag IS NOT present
  - name: end-2-end
    if: branch != master
  - name: build
    if: (branch = master AND type != pull_request) OR tag IS present
  - name: deploy
    if: (branch = master AND type != pull_request) OR tag IS present
